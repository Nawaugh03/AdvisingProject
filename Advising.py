from DatabaseManager import DBmanager
#A rough draft of the code below
"""
The advising manager will generate a few linked list based on the users curriculums.
Have the course linekd list point to a course in the linked list in order to (X-prerequisites could be the previous course Ex: 250 prereq=csdp 222)

for example csdp: [100]->[221]->[222]->[250]->[301]->...
                           |
                           V
                   math:[109?]-[110]
each node will be the courses informatiion, (courseID, course,name, number, title, requisites, priority, and pass-condition(either pass/withdraw/failed?))
These list will be generated by curriculum area ex: csdp 221<= program core, csdp
                                                    math 109 >= curriculum iv(Mathematics)
                                                    math 112 <= program core, math
program core must have priority over other courses
priority needs an symbolic representation with !
Co-requisites: ~ 

"""


class Course:
    def __init__(self, dataval=[]):
        self.CourseID=dataval[0]
        self.course=dataval[1]
        self.number=dataval[2]
        self.title=dataval[3]
        self.credits=dataval[4]
        self.Prerequisite=[5]
        self.area=dataval[6]
        self.nextval=None
class CourseList:
    def __init__(self,Listname:str):
        self.totalscore=0
        self.Listname=Listname
        self.headval=None
    def getCourse(self,dataval:Course):
        newCourse=dataval
        if (self.headval is None):
            self.headval=newCourse
        else:
            curr=self.headval
            while(curr.nextval is not None):
                curr=curr.nextval
            curr.nextval = newCourse
       
    def PrintList(self):
        curr=self.headval
        message=""
        if(curr!=None):
            print(f"{self.Listname}:")
            while(curr is not None):
                message+=str(curr.title)+"->"
                curr=curr.nextval
            message+="NULL"
        else:
            message+="N/A"
        print(message)
        
    def Search(self, target:Course):
        curr=self.headval
        if(curr!=None):
            while(curr is not None):
                if(curr.CourseID in target.CourseID):

                    return True
                curr=curr.nextval
        return False

class Student: #This class will have the structured set of information of students
    def __init__(self):
        self.Courses={}
        self.CourseHistory={}
        self.Area={"CA1":9,"CA2SS":3,"CA2BS":3,"CA3":8,"CA4":4,"CA5":9,"CA6":4,"C0":50,"C0E":9,"MATHC0E":16,"ECONC0E":12, "ECONC0EBE":3,"ECONC0EABE":3,"M":0}
    def addCourse(self, Course):
        Area=Course.area
        #print(Area not in self.Courses.keys())
        if(Area not in self.Courses.keys()):
           self.Courses[Area]= CourseList(Area)
           self.Courses[Area].totalscore=self.Area[Area]
        self.Courses[Area].getCourse(Course)
    """
    def addCourses(self,NewCourse:Course):
        CourseName=str(NewCourse.title).upper()
        CourseArea=str(NewCourse.area).upper()
        if(self.Courses==[]):
            NewCourseTree=CourseList(CourseName)
            NewCourseTree.getCourse(NewCourse)
            self.Courses.append(NewCourseTree)
        else:
            existingArea=False
            #Check if there is an existing course list with the same course abrev. 
            #if so, either insert course in existing course list or if the courselist doesn't exist
            for i in self.Courses:  
                if i.ListName == NewCourse.course:
                    existingArea=True
                    if(i.Search(NewCourse)==False):
                        i.GetCourse(NewCourse)
                    break
            if(existingArea==False):
                NewCourseTree=CourseList(CourseName)
                NewCourseTree.getCourse(NewCourse)
                self.Courses.append(NewCourseTree)
    """         

if __name__ in "__main__":
    A = DBmanager("localhost", "root", "1234","hawkdb")
    Philip=Student()
    for i in range(len(A.tables[0].Content)):
        NewCourse=Course(A.tables[0].Content[i])
        Philip.addCourse(NewCourse)
    Philip.Courses["CA1"].PrintList()
    Philip.Courses["CA2SS"].PrintList()
    Philip.Courses["CA2BS"].PrintList()
    Philip.Courses["CA3"].PrintList()
    Philip.Courses["CA4"].PrintList()
    Philip.Courses["CA5"].PrintList()
    Philip.Courses["CA6"].PrintList()
    Philip.Courses["C0"].PrintList()
    Philip.Courses["C0E"].PrintList()
    Philip.Courses["MATHC0E"].PrintList()
    Philip.Courses["ECONC0E"].PrintList()
    Philip.Courses["ECONC0EBE"].PrintList()
    Philip.Courses["ECONC0EABE"].PrintList()
    Philip.Courses["M"].PrintList()

    """
    Get all courses, set them to a linked list, and store them into a dictionary. 
    A = DBmanager("localhost", "root", "1234","hawkdb")
    Courses={}
    CourseABVList=[]
    for i in range(len(A.tables[0].Content)):
        NewCourse=Course(A.tables[0].Content[i])
        CourseAbv=str(NewCourse.course).upper()
        if(CourseAbv not in CourseABVList):
            CourseABVList.append(CourseAbv)
            NewCourseTree=CourseList(CourseAbv)
            NewCourseTree.getCourse(NewCourse)
            Courses[CourseAbv]=NewCourseTree
        else:
            Courses[CourseAbv].getCourse(NewCourse)

        
    for value in Courses.values():
        value.PrintList()
    """   
    """
    A = DBmanager("localhost", "root", "1234","hawkdb")
    Courses=[]
    for i in range(len(A.tables[0].Content)):
        NewCourse=Course(A.tables[0].Content[i])
        CourseName=str(NewCourse.title).upper()
        if(Courses==[]):
            NewCourseTree=CourseList(CourseName)
            NewCourseTree.getCourse(NewCourse)
            Courses.append(NewCourseTree)
        else:
            existingArea=False
            #Check if there is an existing course list with the same course abrev. 
            #if so, either insert course in existing course list or if the courselist doesn't exist
            for i in Courses:  
                if i.Listname == NewCourse.course:
                    existingArea=True
                    if(i.Search(NewCourse)==False):
                        i.GetCourse(NewCourse)
                    break
            if(existingArea==False):
                NewCourseTree=CourseList(CourseName)
                NewCourseTree.getCourse(NewCourse)
                Courses.append(NewCourseTree)
    for i in Courses:
        i.PrintList()
"""
"""
    Code below is testcase of getting all the courses and set them in a course tree.
    A = DBmanager("localhost", "root", "1234","hawkdb")
    CourseTree=CourseList("CSDP")
    for i in range(len(A.tables[0].Content)):
        NewCourse=Course(A.tables[0].Content[i])
        #if ("CSDP" in str(A.tables[0].Content[i][1])):
        CourseTree.getCourse(NewCourse)
    CourseTree.PrintList()
"""
